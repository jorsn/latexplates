\NeedsTeXFormat{LaTeX2e}
\ProvidesExplPackage{bootstrap}{2024-05-02}{0.4.0}{bootstrap your latex files}

\RequirePackage{xparse} % provides \(New|Provide|Declare)DocumentCommand
\NewDocumentCommand \ProvideIf { O{false} m } {
  \clist_map_inline:nn {#2} {
    \cs_if_exist:cTF { if ##1 } {} {
      \exp_args:Nc \newif { if ##1 }
      \use:c { #2 #1 }
    }
  }
}

\NewDocumentEnvironment {ifenv} {mmm} {
  \legacy_if:nTF {#1}
    { \use:c {#2} }
    { \use:c {#3} }
}{
  \legacy_if:nTF {#1}
    { \use:c {end #2} }
    { \use:c {end #3} }
}


\NewDocumentCommand{\tryWithFiles}{mom}{
  \clist_map_inline:nn {#3} {
    \IfFileExists{##1}{
      \IfValueTF{#2}{
        #1[#2]{##1}
      }{
        #1{##1}
      }
    }{}
  }
}

\cs_new:Nn \keyval_map_function:nN {
  \prop_set_from_keyval:Nn \l_tmpa_prop {#1}
  \prop_map_function:NN \l_tmpa_prop #2
}

% extend the search path for tex files

\NewExpandableDocumentCommand \DeclareInputPath {m} {
  \seq_set_from_clist:Nn \l_file_search_path_seq {#1}
}

\NewExpandableDocumentCommand \PrependInputPath {m} {
  \seq_set_from_clist:Nn \l_tmpa_seq { #1 }
  \seq_concat:NNN \l_file_search_path_seq \l_tmpa_seq \l_file_search_path_seq
}

% broken? \PrependInputPath works
\NewExpandableDocumentCommand \AppendInputPath {m} {
  \clist_map_inline:nn { #1 } { \seq_put_right:Nn \l_file_search_path_seq {##1} }
}

\NewDocumentCommand \suppresspackage {m} {
  \clist_map_inline:nn {#1} {
    \cs_gset:cpn { ver@##1.sty } { 9999/12/31 }
  }
}
\NewDocumentCommand \unsuppresspackage {m} {
  \clist_map_inline:nn {#1} {
    \cs_gset_eq:cN { ver@##1.sty } \relax
  }
}

% for legacy TeXlive (2020 and before)
\let\IfPackageLoadedWithOptionsTF\@ifpackagewith
\let\IfClassLoadedWithOptionsTF\@ifclasswith


\seq_put_left:NV \l_file_search_path_seq \CurrentFilePath

\RequirePackage{l3keys-compat}

\DeclareKeys [ bootstrap ] {
%, path .code:n = { \PrependInputPath{#1} }
%
%%, class .code:n = {
%%    \ProvideExpandableDocumentCommand \class {} {#1}
%%  }
%%, class .value_required:n = true
%, classoptions .tl_set:N = \bootstrap_classoptions_tl
%
%, options .clist_set:N = \bootstrap_options_clist
%, options .initial:n = {}
%
%, pkgs/suppress .code:n = { \suppresspackage {#1} }
%, pkgs/suppress .initial:n = {}

, flushbuffer_noise_size .code:n = {
    \PassOptionsToPackage{flushbuffer_noise_size=#1}{outputdir}
  }
}

\ProcessKeyOptions[ bootstrap ]


\RequirePackage{outputdir}

\NewDocumentCommand \ProvideOptions {m} {
  \clist_if_exist:NF \options { \clist_gset:Nn \options {#1} }
}

\NewDocumentCommand \AppendOptions {m} {
  \clist_put_right:Nn \options {#1}
}
\let \PassOptions \AppendOptions

\NewDocumentCommand \ExecuteKeyOptions {om} {
  \PassOptionsToClass {#2} \@currname
  \IfValueTF {#1}
    { \SetKeys [#1] {#2} }
    { \SetKeys {#2} }
}

\cs_set:Nn \exp_opt_arg:Nn { #1 [#2] }
\cs_set:Nn \exp_opt_arg:Nnn { #1 [#2] {#3} }
\cs_generate_variant:Nn \exp_opt_arg:Nnn { Non }

\NewDocumentCommand \WithOptions {m O{} m} {
  \AppendOptions{#2}
  \NewExpandableDocumentCommand \class {} { #3 }
  \exp_opt_arg:Non #1 {\options} {#3}
}

\NewExpandableDocumentCommand \DocumentClass {} { \WithOptions \documentclass }

\NewExpandableDocumentCommand \IfOptionsTF {} {
  %\@expandtwoargs \@if@pti@ns {\@classoptionslist}
  \exp_args:No \IfClassLoadedWithOptionsTF \class
}

\NewDocumentCommand \ProvideIfOptions {m} {
  \ProvideIf[false]{#1}
  \clist_map_inline:nn {#1} { \IfOptionsTF{##1} { \use:c {##1 true} } {} }
}

% vim: ts=2 sw=2
